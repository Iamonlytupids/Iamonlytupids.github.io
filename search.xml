<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SHOI2012随机树 题解</title>
      <link href="/2019/08/01/%5BSHOI2012%5D%E9%9A%8F%E6%9C%BA%E6%A0%91%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/08/01/%5BSHOI2012%5D%E9%9A%8F%E6%9C%BA%E6%A0%91%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>![题目描述]([SHOI2012]随机树 题解/题目描述.png)</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入仅有一行,包含两个正整数 $q,n$ ,分别表示问题编号以及叶结点的个数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出仅有一行，包含一个实数 $d$ ，四舍五入精确到小数点后 6 位。如果 $q = 1$ ，则 $d$ 表示叶结点平均深度的数学期望值；如果 $q = 2$ ，则 $d$  表示树深度的数学期望值。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h4 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h4><blockquote><p>1 4</p></blockquote><h4 id="输出1"><a href="#输出1" class="headerlink" title="输出1"></a>输出1</h4><blockquote><p>2.166667</p></blockquote><h4 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h4><blockquote><p>2 4</p></blockquote><h4 id="输出2"><a href="#输出2" class="headerlink" title="输出2"></a>输出2</h4><blockquote><p>2.666667</p></blockquote><h4 id="输入3"><a href="#输入3" class="headerlink" title="输入3"></a>输入3</h4><blockquote><p>1 12</p></blockquote><h4 id="输出3"><a href="#输出3" class="headerlink" title="输出3"></a>输出3</h4><blockquote><p>4.206421</p></blockquote><h4 id="输入4"><a href="#输入4" class="headerlink" title="输入4"></a>输入4</h4><blockquote><p>2 12</p></blockquote><h4 id="输出4"><a href="#输出4" class="headerlink" title="输出4"></a>输出4</h4><blockquote><p>5.916614</p></blockquote><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>![数据范围]([SHOI2012]随机树 题解/数据范围.png)</p><p>第一眼看到期望就会想到DP</p><p>接下来考虑如何设计能够转移的DP状态。</p><p>先思考1问题</p><p>我们可以考虑将操作的次数设计为DP的第一维</p><p>这样我们就可以得到一个DP状态 $E[i]$ 表示经过 $i$ 次操作后叶节点的深度和的期望(问题1要求的是平均深度,最后将求得的期望除以最后的叶节点个数就可求出)</p><p>那么我们如何转移这样一个状态呢</p><p>在求 $E[i]$ 的时候,我们可以先将起始节点A进行一步操作</p><p>然后我们可以将得到的两个叶子节点看作两个起始节点B,C,这样两个起始节点的操作数 $t$ 就会小于 $i$ 了,我们就可以尝试通过这两个节点和之前的dp状态来进行转移</p><p>dp方程很好想<br> 这里两个节点操作后的叶子节点的深度和 $X,Y$ 相加后再加上叶子节点总数 $T$ 就是整棵树叶子结点的深度和Z,所以 $E(Z)=E(X+Y)+A=E(X)+E(Y)+A$<br> $$E[i]=\Sigma^{i-1} _ {j=0} (E[j] + E[i-1-j]) * g[j][i-1-j] + i + 1$$<br> 初值: $E[0]=0$<br> 这里 $g[i][j]$ 初始状态表示操作一次以后，在A的左子树中操作了 $i$ 次，在A的右子树中操作了 $j$ 次的概率</p><p> 下面考虑如何得到 $g[i][j]$</p><p> 我们可以考虑记录 $g_e[i][j]$, 它表示初始状态操作一次以后，在A的左子树中操作了 $i$ 次，在A的右子树中操作了 $j$ 次,其中最后一次操作在A的左子树中发生的概率</p><p> 两者的转移方程如下<br> $$g[i][j]=\Pi^j_{k=0}g_e[i][k]<em>\Pi^{j-1}_{p=k}(p+1)/(i+p+2)$$<br> $$g_e[i][j]=g[i-1][j]</em>i/(i+j+1)$$</p><p> 初值: $g[0][0]=g_e[0][0]=1$<br> 这样问题1就解决了</p><p> 下面考虑问题2<br> 问题2的处理方法大同小异<br> 直接用期望DP不好DP<br> 我们可以通过概率进行DP</p><p> 设P[i][j]表示在初始状态操作 $i$ 次后最大树深是 $j$ 的概率<br> $$P[i][j]=\Sigma^{i-1}<em>{k=0}\Sigma</em>{\max(x,y)+1=j}P[k][x]<em>P[i-1-k][y]</em>g[k][i-1-k]$$<br> 最后再计算期望即可</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h6><pre><code class="C++">#include &lt;bits/stdc++.h&gt;#define rei register int#define rel register ll#define maxn 110typedef long long ll;typedef double db;typedef long double ldb;typedef unsigned long long ull;using namespace std;int q,n;ldb g[maxn][maxn][2];ldb E[maxn];ldb P[maxn][maxn];void Pre_DP(){    g[0][0][0] = g[0][0][1] = 1;    for(rei tot = 1 ; tot &lt;= n - 2; ++ tot)     for(rei i = 0 ; i &lt;= tot ; ++ i){      if( i - 1 &gt;= 0 )      g[i][tot - i][1] = g[i - 1][tot - i][0] * (ldb) i / (ldb) (tot + 1);      ldb k = 1;       for(rei j = tot - i ; j &gt;= 0 ; --j)      g[i][tot - i][0] += g[i][j][1] * k , k *= (ldb) j / (ldb) (i + j + 1);     }}int main(){    ios::sync_with_stdio(false);    cin &gt;&gt; q &gt;&gt; n ;    Pre_DP();    if( q == 1 ){        for(rei i = 1 ; i &lt;= n - 1; ++i ){         for(rei j = 0; j &lt;= i - 1 ; ++j )          E[i] += ( E[j] + E[i - j - 1] ) * g[j][i - j - 1][0];          E[i] += (ldb) i + (ldb) 1;        }        printf(&quot;%.6Lf\n&quot;,E[n - 1] / n );    }    if( q == 2 ){        P[0][0]=1;        for(rei i = 1 ; i &lt;= n - 1 ; ++i )         for(rei j = 0 ; j &lt;= i - 1 ; ++j ){             ldb cnt = 0;             for(rei k = 1 ; k &lt;= j ; ++k )             cnt += P[i - 1 - j][k - 1] , P[i][k + 1] += P[j][k] * cnt * g[j][i - 1 - j][0];             cnt = 0;             for(rei k = 0 ; k &lt;= j ; ++k )             cnt += P[i - 1 -j][k], P[i][k + 1] += P[j][k] * cnt * g[j][i - 1 - j][0];         }        ldb ans = 0;        for(rei i = 1 ; i &lt;= n - 1 ; ++i )        ans += (ldb) i * P[n - 1][i];        printf(&quot;%.6Lf&quot;,ans);    }    return 0;}</code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF721C题解</title>
      <link href="/2019/08/01/CF721C%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/08/01/CF721C%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p></p><h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>一座城市里有 $n$ 个景点,景点从 $1$ 到 $n$ 进行编号有些景点之间设有单向的道路,Irina经过 $i$ 道路要时间 $t_i$ ,这 $n$ 个城市和这些道路形成无环图,Irina从 $1$ 号景点出发到 $n$ 号景点Irina想知道在行驶总时间不超过 $T$ 的情况下最多能游览几个景点(前提是他要到达 $n$ 号景点),以及他游览最多景点时依次经过的景点(包括 $1$ 和 $n$ )</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>首行三个数 $n,m,T(2\leq n \leq 5000, 1 \leq m \leq 5000,1\leq T \leq 10^9)$ 随后 $m$ 行里每行三个数 $u_i,v_i,t_i(1\leq u_i,v_i \leq n,u_i \ne v_i,1\leq t_i \leq 10^9)$ 表示景点 $u_i$ 和景点 $v_i$ 之间有一条从 $u_i$ 到 $v_i$ 的有向道路,Irina需要花时间 $t_i$ 经过这条道路</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>第一行输出 $k(2\leq k \leq n)$ ,数据保证有解. 第二行输出从 $1$ 到 $n$ 依次经过的景点编号，每两个景点编号之间有空格</p><p></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h4 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h4><blockquote><p>4 3 13<br>1 2 5<br>2 3 7<br>2 4 8</p></blockquote><h4 id="输出1"><a href="#输出1" class="headerlink" title="输出1"></a>输出1</h4><blockquote><p>3<br>1 2 4 </p></blockquote><h4 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h4><blockquote><p>6 6 7<br>1 2 2<br>1 3 3<br>3 6 3<br>2 4 2<br>4 6 2<br>6 5 1</p></blockquote><h4 id="输出2"><a href="#输出2" class="headerlink" title="输出2"></a>输出2</h4><blockquote><p>4<br>1 2 4 6 </p></blockquote><h4 id="输入3"><a href="#输入3" class="headerlink" title="输入3"></a>输入3</h4><blockquote><p>5 5 6<br>1 3 3<br>3 5 3<br>1 2 2<br>2 4 3<br>4 5 2</p></blockquote><h4 id="输出3"><a href="#输出3" class="headerlink" title="输出3"></a>输出3</h4><blockquote><p>3<br>1 3 5 </p></blockquote><p>因为是有向无环图，我们可以将该图的拓扑排序,</p><p></p><p> $dp[i][j]$ 表示从 $ 1 $ 到 $i$ 的路程中经过 $j$ 个点(包括 $ 1 $ 和 $ i $ )的最短路径,通过拓扑序进行dp即可.</p><p></p><p></p><p>$$ dp[i][j]=\min_{ver[k][i]=1}(dp[k][j-1]) $$</p><p>设初值 $dp[1][1]=1$</p><p></p><p></p><p>时间复杂度为 $O(nm)$</p><p></p><p>代码:</p><pre><code class="C++">#include &lt;bits/stdc++.h&gt;#define maxn 5010#define inf 1000000001#define rei register int#define rel register llusing namespace std;struct node{    int to,next,w;}edge[maxn],n_edge[maxn];int n,m,t;int head[maxn],tot,n_tot,n_head[maxn];int entry[maxn];int dp[maxn][maxn],prevv[maxn][maxn];void add(int u,int v,int w){    edge[++tot].to=v,edge[tot].next=head[u],edge[tot].w=w,head[u]=tot;     n_edge[++n_tot].to=u,n_edge[n_tot].next=n_head[v],n_edge[n_tot].w=w,n_head[v]=n_tot;}int main(){    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;t);    for(rei i=1;i&lt;=m;++i){        int u,v,w;        scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;w);        add(u,v,w);        ++entry[v];    }    for(rei i=0;i&lt;=n;++i)     for(rei j=0;j&lt;=n;++j)      dp[i][j]=inf;    int q[maxn],hhead=1,tail=0;    for(rei i=1;i&lt;=n;++i)    if(!entry[i])    q[++tail]=i;    dp[1][1]=0;    while(hhead&lt;=tail){        int p=q[hhead++];        for(rei j=1;j&lt;=n;++j)        for(rei i=n_head[p];i;i=n_edge[i].next)        if(dp[n_edge[i].to][j-1]+n_edge[i].w&lt;dp[p][j])        dp[p][j]=dp[n_edge[i].to][j-1]+n_edge[i].w,prevv[p][j]=n_edge[i].to;        for(rei i=head[p];i;i=edge[i].next){        entry[edge[i].to]--;        if(!entry[edge[i].to])        q[++tail]=edge[i].to;        }       }    for(rei i=n;i;i--)    if(dp[n][i]&lt;=t){        printf(&quot;%d\n&quot;,i);        int tot=0;        int s[maxn],top=0;        for(rei j=n;j;j=prevv[j][i-tot],tot++)        s[++top]=j;        for(rei j=top;j;j--)        printf(&quot;%d &quot;,s[j]);        return 0;    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
