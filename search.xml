<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/07/31/721C%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/07/31/721C%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>题目简述<br>一座城市里有 $$$n$$$ 个景点,景点从 $$$1$$$ 到 $$$n$$$ 进行编号有些景点之间设有单向的道路,Irina经过 $$$i$$$ 道路要时间 $$$t_i$$$ ,这 $$$n$$$ 个城市和这些道路形成无环图,Irina从 $$$1$$$ 号景点出发到 $$$n$$$ 号景点Irina想知道在行驶总时间不超过 $$$T$$$ 的情况下最多能游览几个景点(前提是他要到达 $$$n$$$ 号景点),以及他游览最多景点&gt;时依次经过的景点(包括 $$$1$$$ 和 $$$n$$$ )</p><p>输入<br>首行三个数 $$$n,m,T(2\leq n \leq 5000, 1 \leq m \leq 5000,1\leq T \leq 10^9)$$$ 随后 $$$m$$$ 行里每行三个数 $$$u_i,v_i,t_i(1\leq u_i,v_i \leq n,u_i \ne v_i,1\leq t_i \leq 10^9)$$$ 表示景点 $$$u_i$$$ 和景点 $$$v_i$$$ 之间有一条从 $$$u_i$$$ 到 $$$v_i$$$ 的有向道路,Irina需要花时间 $$$t_i$$$ 经过这条道路</p><p>输出<br>第一行输出 $$$k(2\leq k \leq n)$$$ ,数据保证有解. 第二行输出从 $$$1$$$ 到 $$$n$$$ 依次经过的景点编号，每两个景点编号之间有空格</p><p>样例<br>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 3 13</span><br><span class="line">1 2 5</span><br><span class="line">2 3 7</span><br><span class="line">2 4 8</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 4</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 6 7</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">3 6 3</span><br><span class="line">2 4 2</span><br><span class="line">4 6 2</span><br><span class="line">6 5 1</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 4 6</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5 6 </span><br><span class="line">1 3 3</span><br><span class="line">3 5 3</span><br><span class="line">1 2 2</span><br><span class="line">2 4 3</span><br><span class="line">4 5 2</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 5</span><br></pre></td></tr></table></figure><p>因为是有向无环图，我们可以将该图的拓扑排序,</p><p>$$$dp[i][j]$$$表示从$$$1$$$到$$$i$$$的路程中经过$$$j$$$个点(包括$$$1$$$和$$$i$$$)的最短路径,通过拓扑序进行dp即可.</p><p>$$$dp[i][j]=\min_{ver[k][i]=1}(dp[k][j-1])$$$<br>设初值 $$$dp[1][1]=1$$$</p><p>时间复杂度为 $$$O(nm)$$$</p><p>代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define maxn 5010</span><br><span class="line">#define inf 1000000001</span><br><span class="line">#define rei register int</span><br><span class="line">#define rel register ll</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">int to,next,w;</span><br><span class="line">&#125;edge[maxn],n_edge[maxn];</span><br><span class="line">int n,m,t;</span><br><span class="line">int head[maxn],tot,n_tot,n_head[maxn];</span><br><span class="line">int entry[maxn];</span><br><span class="line">int dp[maxn][maxn],prevv[maxn][maxn];</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">edge[++tot].to=v,edge[tot].next=head[u],edge[tot].w=w,head[u]=tot; </span><br><span class="line">n_edge[++n_tot].to=u,n_edge[n_tot].next=n_head[v],n_edge[n_tot].w=w,n_head[v]=n_tot;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;t);</span><br><span class="line">for(rei i=1;i&lt;=m;++i)&#123;</span><br><span class="line">int u,v,w;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">add(u,v,w);</span><br><span class="line">++entry[v];</span><br><span class="line">&#125;</span><br><span class="line">for(rei i=0;i&lt;=n;++i)</span><br><span class="line"> for(rei j=0;j&lt;=n;++j)</span><br><span class="line">  dp[i][j]=inf;</span><br><span class="line">    int q[maxn],hhead=1,tail=0;</span><br><span class="line">    for(rei i=1;i&lt;=n;++i)</span><br><span class="line">    if(!entry[i])</span><br><span class="line">    q[++tail]=i;</span><br><span class="line">    dp[1][1]=0;</span><br><span class="line">    while(hhead&lt;=tail)&#123;</span><br><span class="line">    int p=q[hhead++];</span><br><span class="line">    for(rei j=1;j&lt;=n;++j)</span><br><span class="line">    for(rei i=n_head[p];i;i=n_edge[i].next)</span><br><span class="line">    if(dp[n_edge[i].to][j-1]+n_edge[i].w&lt;dp[p][j])</span><br><span class="line">    dp[p][j]=dp[n_edge[i].to][j-1]+n_edge[i].w,prevv[p][j]=n_edge[i].to;</span><br><span class="line">    for(rei i=head[p];i;i=edge[i].next)&#123;</span><br><span class="line">    entry[edge[i].to]--;</span><br><span class="line">    if(!entry[edge[i].to])</span><br><span class="line">    q[++tail]=edge[i].to;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">for(rei i=n;i;i--)</span><br><span class="line">if(dp[n][i]&lt;=t)&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,i);</span><br><span class="line">    int tot=0;</span><br><span class="line">    int s[maxn],top=0;</span><br><span class="line">for(rei j=n;j;j=prevv[j][i-tot],tot++)</span><br><span class="line">s[++top]=j;</span><br><span class="line">for(rei j=top;j;j--)</span><br><span class="line">printf(&quot;%d &quot;,s[j]);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/31/hello-world/"/>
      <url>/2019/07/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
